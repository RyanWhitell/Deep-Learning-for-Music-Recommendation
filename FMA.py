import os
import pandas as pd
import ast
import numpy as np
from sklearn.preprocessing import MultiLabelBinarizer

class FreeMusicArchive:
    def __init__(self, fma_set, sr=44100):
        self.NB_AUDIO_SAMPLES = 1321967
        self.SAMPLING_RATE = sr
        self.META_FEATURES_PATH = './Data/fma_metadata/features.csv'
        self.META_GENRES_PATH = './Data/fma_metadata/genres.csv'
        self.META_TRACKS_PATH = './Data/fma_metadata/tracks.csv'
        self.META_ECHO_PATH = './Data/fma_metadata/echonest.csv'
        self.DATA_PATH = './Data/fma_large'


        # MP3 files that caused librosa to throw audioread.NoBackendError from the large set
        self.FILES_CORRUPT = [
            2624, 3284, 8669, 10116, 11583, 12838, 13529, 14116, 14180, 20814, 22554, 23429, 23430, 23431, 25173, 25174,
            25175, 25176, 25180, 29345, 29346, 29352, 29356, 33411, 33413, 33414, 33417, 33418, 33419, 33425, 35725, 39363, 84504, 94052,
            41745, 42986, 43753, 50594, 50782, 53668, 54569, 54582, 61480, 61822, 63422, 63997, 72656, 72980, 73510, 80553, 82699, 84503, 
            84522, 84524, 86656, 86659, 86661, 86664, 87057, 90244, 90245, 90247, 90248, 90250, 90252, 90253, 90442, 90445, 91206, 92479, 
            94234, 95253, 96203, 96207, 96210, 98105, 98562, 101265, 101272, 101275, 102241, 102243, 102247, 102249, 102289, 106409, 106412, 
            106415, 106628, 108920, 109266, 110236, 115610, 117441, 127928, 129207, 129800, 130328, 130748, 130751, 131545, 133641, 133647, 
            134887, 140449, 140450, 140451, 140452, 140453, 140454, 140455, 140456, 140457, 140458, 140459, 140460, 140461, 140462, 140463, 
            140464, 140465, 140466, 140467, 140468, 140469, 140470, 140471, 140472, 142614, 144518, 144619, 145056, 146056, 147419, 147424, 
            148786, 148787, 148788, 148789, 148790, 148791, 148792, 148793, 148794, 148795, 151920, 155051
        ]
        # MP3 file IDs with 0 second of audio.
        self.FILES_NO_AUDIO = [1486, 5574, 65753, 80391, 98558, 98559, 98560, 98571, 99134, 105247, 108925, 126981, 127336, 133297, 143992]
        # MP3 train file IDs with less than 30 seconds of audio.
        self.FILES_SHORT = [98565, 98566, 98567, 98568, 98569, 108924]
        # MP3 train file IDs from the large set with less than 30 seconds of audio found while training
        self.FILES_SHORT_LARGE = [
            440,449,781,782,784,785,789,794,798,857,1027,1067,1084,1176,1178,1180,1205,1223,1228,1230,1236,
            1237,1241,1243,1507,1620,1717,1737,1812,1813,1974,2108,3448,3938,4023,4242,4854,4863,4870,4881,
            4897,4904,4907,4908,4913,4961,4979,4984,4986,6629,6676,6678,6681,6682,6683,6713,7050,7328,7336,
            7348,7380,7382,7387,7395,7404,7474,8325,8327,8341,8343,8352,8365,8407,8663,8845,8850,8862,8885,
            8996,8997,8998,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,
            9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,
            9034,9035,9036,9037,9038,9039,9040,9041,9042,9043,9044,9045,9046,9047,9048,9049,9050,9051,9052,
            9053,9054,9055,9056,9057,9058,9059,9062,9064,9065,9066,9068,9069,9070,9071,9072,9073,9074,9075,
            9076,9077,9078,9079,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,
            9095,9096,9097,9098,9099,9100,9101,9102,9103,9104,9105,9106,9107,9108,9109,9110,9111,9112,9113,
            9114,9115,9116,9117,9118,9119,9120,9121,9122,9123,9124,9125,9126,9127,9128,9129,9130,9131,9132,
            9133,9134,9135,9136,9137,9138,9139,9140,9141,9142,9143,9144,9145,9146,9147,9148,9149,9150,9214,
            9271,9284,9286,9290,9297,9298,9302,9304,9308,9313,9314,9316,9318,9324,9338,9356,9366,9368,9373,
            9451,9587,10195,10211,10227,10236,10245,10248,10257,10272,10282,10292,10380,10413,10417,10520,
            10522,10524,10526,10528,10530,10532,10533,10534,10536,10538,10540,10542,10544,10546,10548,10551,
            10553,10555,10557,10559,10931,11438,11519,11755,11756,11798,12075,12077,12079,12080,12082,12097,
            12218,12265,12276,12279,12512,12992,13004,13009,13171,13229,13408,13416,13419,13420,13424,13462,
            13467,13881,13883,13944,14042,14140,14535,14573,14636,15151,15205,15641,15969,16536,16560,16714,
            17187,17190,17192,17194,17220,17221,17222,17227,17366,17638,17877,18119,18122,18679,18820,18861,
            18866,18924,18936,18940,19161,19170,19173,19176,19703,19943,19946,19947,19948,19952,19953,20270,
            20363,20838,20871,20873,20877,20881,20886,20917,20918,20980,21260,21554,21823,21865,21869,22058,
            22061,22105,22109,22111,22112,22785,22786,22787,22788,22792,22794,22796,22798,22801,22802,22818,
            22820,22831,22834,22836,22852,22854,22855,22859,22873,22874,22877,22878,22880,22881,22882,22883,
            22932,23218,23300,23311,23366,23517,23521,23522,23531,23533,23534,23543,23623,23638,23816,23825,
            23887,24080,24577,24580,24581,24582,24586,24587,24592,24594,24834,24835,24836,24900,24911,25269,
            25293,25327,25715,25717,25719,25721,25723,25725,25853,25860,26203,26208,26212,26584,26590,26594,
            26602,26746,26770,26812,27271,27487,27489,27831,27834,27881,27882,27884,27887,27889,27890,27891,
            27893,27895,27897,27898,27899,27900,27902,28671,28714,28788,28858,28884,28885,28897,28912,29029,
            29030,29031,29032,29033,29034,29035,29036,29221,29222,29223,29224,29225,29226,29231,29232,29233,
            29234,29236,29238,29240,29241,29242,29280,29303,29313,29314,29418,29419,29420,29421,29422,29423,
            29427,29428,29429,29430,29432,29434,29436,29437,29438,29548,29737,29749,29768,29904,30130,30192,
            30207,31413,31687,31688,31691,31693,31698,31701,31702,31703,31771,31827,32141,32929,32975,33350,
            33391,33690,33881,33892,34781,34784,34786,35032,35369,35374,35380,35384,35634,35795,35800,35813,
            35920,36102,36206,36210,36409,36458,36469,36515,36517,36519,36541,36543,36544,36545,36747,36750,
            36752,36754,36756,36761,36927,36993,37032,37037,37144,37456,37528,37566,38816,38985,39038,39600,
            39601,39699,39763,40153,40228,40576,40728,40733,40770,40969,41126,41376,41389,41393,41395,41396,
            41397,41400,41403,41404,41407,41409,41410,41411,41412,41413,41414,41415,41417,41464,41474,41482,
            41483,41522,41525,41538,41713,41716,41717,41718,41932,42084,42100,42103,42106,42108,42109,42111,
            42113,42114,42115,42116,42118,42121,42122,42124,42284,42352,42353,42354,42355,42356,42357,42358,
            42359,42360,42361,42362,42363,42364,42365,42366,42367,42368,42369,42370,42371,42488,42635,42910,
            42963,42974,43017,43119,43241,43330,43634,43635,43715,44144,44222,45221,45226,45227,45315,45585,
            45587,45600,45608,45949,46099,46231,46240,46242,46250,46306,46363,46933,47187,47220,47351,47757,
            48011,48144,48720,48819,48823,48830,48890,48901,48903,48966,48988,49170,49384,49463,49867,49869,
            49873,50379,50414,50486,50497,50530,50632,50633,50656,50903,50920,50921,50922,50925,50950,51279,
            51285,51287,51334,51335,51337,51338,51341,51343,51349,51353,51354,51356,51507,51984,52080,52182,
            52316,52320,52324,52326,52331,52334,52337,52453,52640,52660,52995,53358,53387,54030,54117,55311,
            56494,56531,56580,56581,56584,56592,56594,56595,56596,56852,56943,57101,57102,57108,57145,57146,
            57147,57673,57704,57723,57729,57755,57757,57758,57760,57765,57768,57773,57775,57777,58165,58172,
            58332,58530,58665,58669,58679,58687,58808,59077,59328,59444,59555,59819,59829,59848,60046,60083,
            60089,60090,60092,60165,60601,61801,61805,61899,61900,62571,62598,62600,62602,62607,62632,62635,
            62728,63150,63153,63154,63158,63160,63164,63165,63166,63167,63168,63169,63170,63171,63172,63173,
            63256,63377,63378,63752,63764,63767,63891,63896,64561,64987,65642,65817,65823,65981,66450,66470,
            66476,66478,67323,68165,68169,68386,68492,68574,68578,68829,68901,68945,68952,68959,69034,69298,
            70026,70107,70255,70262,70810,70865,71092,71323,71330,71334,71529,71536,71612,71630,71651,71652,
            71670,71739,71875,72419,72422,72424,73877,74008,74117,74143,74231,74402,74404,74408,74411,74413,
            74672,74681,74705,74874,74890,74903,74909,74911,74913,75091,75095,75096,75097,75098,75099,75101,
            75102,75103,75104,75105,75106,75107,75108,75109,75110,75116,75117,75118,75119,75121,75122,75123,
            75126,75127,75128,75129,75130,75131,75132,75133,75135,75136,75137,75138,75139,75140,75141,75142,
            75143,75144,75145,75146,75147,75150,75151,75152,75153,75154,75155,75156,75157,75161,75162,75163,
            75164,75165,75166,75167,75168,75169,75170,75171,75172,75173,75174,75175,75179,75180,75182,75183,
            75186,75187,75188,75189,75190,75205,75215,75284,75311,75325,75327,75382,75402,75448,75462,75463,
            75483,75564,75565,75566,75568,75569,75570,75571,75576,75668,75690,75789,75805,75815,75819,75822,
            75828,75832,75834,75836,75841,75847,75857,75863,75888,75922,75924,75944,75947,75949,75951,75956,
            75957,75966,75970,75979,75980,75983,75985,75986,75989,75990,75991,76008,76010,76011,76012,76015,
            76016,76018,76019,76020,76021,76022,76024,76037,76039,76048,76327,76329,76398,76401,76402,76407,
            77724,77763,78515,78986,79522,79655,79917,80237,80578,80884,80890,80926,80927,80930,80934,80937,
            80938,80940,80943,80945,80946,80951,80953,80956,80958,80964,80970,80974,80977,80982,80983,80984,
            80985,80988,80990,80991,80992,80997,80998,80999,81000,81001,81005,81008,81010,81012,81289,81290,
            81292,81294,81295,81298,81299,81301,81338,81747,81751,81987,82012,82251,82361,82540,82543,82876,
            82879,82977,83015,83027,83036,83246,83257,83273,83320,83406,83414,83952,84160,84403,84404,84406,
            84408,84411,84413,84415,84418,84419,84421,84424,84425,84428,84430,84431,84432,84433,84536,85495,
            85501,85502,85714,85737,85743,85863,86245,86248,86348,86349,86350,86354,86356,86359,86421,86507,
            87175,87178,87333,87334,87335,87337,87340,88043,88047,88090,89250,89435,89606,90240,91270,91273,
            91274,91307,91313,91545,91547,91550,91552,94541,94665,94670,94672,94676,94681,94701,94743,95050,
            95574,95579,95744,95745,95749,95750,95754,95788,95789,95790,95791,95796,95810,95866,96062,96068,
            96312,96486,96845,96918,97276,97694,97815,98241,98242,98244,98248,98683,99101,99452,99673,102064,
            102075,102924,103535,103881,104407,104771,106384,106735,107818,108013,108121,108128,108129,108458,
            108713,108723,108742,108751,108905,109248,109319,109321,109985,109986,109988,109990,109992,109993,
            109995,109996,109997,109998,109999,110000,110001,110003,110004,110007,110008,110009,110011,110014,
            110246,110339,110535,110538,110745,110940,111053,111065,111077,111127,111132,111135,111144,111560,
            111572,111584,111629,111633,111858,111861,112403,112406,112725,112753,112757,112794,112797,112798,
            112864,113588,113593,113650,113651,113657,113658,113664,113665,113666,113667,113668,113669,113671,
            113687,113689,113726,113773,113775,113776,113777,113798,113828,113829,113830,113831,113833,113834,
            113836,113837,113838,113839,113840,113841,113843,113844,113845,113847,113848,113849,113851,113852,
            113853,113854,113855,113856,113857,113858,113859,113862,113863,113864,113865,113866,113867,113868,
            113869,113870,113871,113872,113873,113874,113877,113878,113879,113880,113881,113882,113883,113884,
            113885,113886,113887,113888,113889,113890,113891,113892,113893,113894,113895,113896,113897,113898,
            113899,113900,113901,113902,113903,113904,113906,113907,113908,113909,113910,113911,113912,113913,
            113914,113915,113916,113917,113918,113919,113921,113922,113923,113924,113926,113927,113928,113931,
            113944,113945,113951,113952,113966,113983,113985,113986,114003,114005,114016,114060,114081,114083,
            114088,114089,114090,114091,114092,114093,114094,114095,114097,114098,114099,114101,114102,114103,
            114104,114105,114106,114107,114108,114109,114110,114111,114113,114114,114115,114116,114117,114197,
            114229,114247,114248,114249,114250,114251,114252,114253,114254,114255,114256,114257,114258,114259,
            114260,114261,114262,114263,114264,114277,114311,114318,114368,114369,114370,114447,114449,114458,
            114469,114470,114489,114490,114491,114492,114493,114494,114495,114497,114498,114503,114504,114517,
            114526,114527,114530,114542,114543,114557,114560,114561,114562,114568,114569,114570,114573,114574,
            114575,114577,114578,114585,114594,114595,114596,114597,114598,114649,114660,114661,114662,114663,
            114664,114665,114666,114685,114696,114717,114718,114719,114720,114721,114767,114768,114772,114775,
            114786,114789,114791,114792,114794,114800,114807,114816,114818,114822,114825,114829,114831,114835,
            114840,114848,114849,114850,114851,114852,114944,114978,114979,114980,114981,114994,115042,115044,
            115057,115058,115060,115061,115062,115068,115069,115098,115099,115100,115101,115102,115103,115104,
            115105,115106,115107,115108,115109,115110,115111,115112,115113,115114,115115,115116,115119,115122,
            115123,115124,115127,115129,115130,115131,115132,115133,115134,115155,115156,115157,115160,115161,
            115162,115163,115165,115166,115167,115168,115179,115180,115181,115187,115188,115189,115191,115192,
            115194,115195,115196,115198,115200,115208,115234,115236,115237,115238,115239,115240,115241,115244,
            115246,115247,115248,115249,115274,115279,115280,115295,115296,115297,115298,115299,115300,115302,
            115303,115304,115305,115306,115307,115308,115318,115319,115320,115322,115323,115324,115325,115326,
            115327,115328,115329,115330,115331,115333,115334,115335,115336,115337,115338,115341,115342,115343,
            115344,115345,115346,115347,115349,115350,115351,115352,115353,115355,115393,115394,115398,115399,
            115400,115401,115402,115405,115406,115407,115408,115409,115476,115493,115494,115495,115496,115497,
            115498,115499,115500,115501,115503,115504,115505,115507,115508,115510,115511,115512,115513,115515,
            115517,115518,115889,116120,116364,116566,116676,116696,116705,117141,117154,118521,118522,118524,
            118525,118527,118529,118531,118533,118534,118535,118536,118537,118538,118539,118540,118541,118542,
            118543,118544,118545,118546,118547,118548,118549,118551,118552,118553,118554,118555,118556,118675,
            118694,118698,118779,118852,119055,119060,119068,119080,119089,119098,119119,119129,119217,119219,
            119222,119314,119316,119327,119661,119752,119755,119778,119783,119786,119995,120034,120152,120288,
            120289,120290,120499,120560,120567,120569,120571,120700,120880,121382,121383,121384,121385,121388,
            121457,121826,122130,122643,122888,123666,123892,124065,124826,124833,124834,124836,124837,124838,
            124839,124845,124846,124848,124849,125261,125386,125407,125601,125602,125658,126046,126364,126681,
            127011,127320,127345,127348,127691,127715,127717,127718,128180,128972,128973,128974,128975,128976,
            128977,128978,128979,129065,129552,130174,130175,130176,130177,130178,130179,130180,130181,130182,
            130183,130184,130185,130186,130187,130227,130266,130288,130796,131340,131440,131698,131703,131705,
            131725,131862,131921,132092,132146,132325,132328,132332,132335,132339,132342,132343,132396,132418,
            132421,132569,132599,132603,132604,132605,132606,132607,132640,132684,132981,133508,133512,133516,
            133517,133527,133528,133534,133539,133540,133549,133552,133568,133569,133640,133871,133872,133938,
            133953,133960,134129,134131,134156,134163,134200,134254,134265,134266,134267,134270,134301,134302,
            134303,134411,134675,134738,134739,134740,134741,134742,134743,134745,134828,134831,134833,134841,
            134869,134954,134964,135562,135641,135806,135994,136191,136521,136668,136686,136799,137143,137450,
            137503,137908,138514,138673,138674,138675,138676,138677,138678,138679,138680,138681,138682,138683,
            138684,138685,138686,138687,138723,139573,139574,139653,139691,139692,139700,139797,140240,140399,
            140876,141033,141175,141176,141177,141178,141233,141237,141318,141321,141921,141925,141926,141927,
            141928,142165,142168,142175,142623,142652,142742,142919,143403,143406,143407,143408,143409,143410,
            143415,143502,143506,143522,143980,144629,144630,144632,144633,144634,144635,144687,145219,145635,
            145636,145637,145638,145639,145640,145641,145642,145643,145644,145648,146063,146064,146209,146240,
            146346,146420,147235,147807,147813,147816,147903,148115,148117,148122,148128,148129,148752,148818,
            148820,148849,148963,149013,149152,149162,149173,149658,149660,149666,149684,149871,149939,150012,
            151652,151846,151848,152162,152270,153362,153373,153381,153450,154505,154979,154982,154986,155002,
            155003,155004,155006,155008,155010,155012,155014,155016,
        ]
        # MP3 files that are wierd or distorted
        self.FILES_DISTORTED = [107535, 48949, 44374]
        self.FILES_FAULTY = self.FILES_NO_AUDIO + self.FILES_SHORT + self.FILES_SHORT_LARGE + self.FILES_DISTORTED + self.FILES_CORRUPT

        self.TRACKS, self.PARTITION = self.get_metadata(fma_set)
        
        self.FEATURES = self.load(self.META_FEATURES_PATH)
        self.GENRES = self.load(self.META_GENRES_PATH)

        self.ALL_GENRES, self.TOP_GENRES, self.CLASS_MAP, self.NUM_CLASSES = self.get_labels(fma_set)

    def load(self, filepath):
        filename = os.path.basename(filepath)
        if 'features' in filename:
            return pd.read_csv(filepath, index_col=0, header=[0, 1, 2])

        if 'echonest' in filename:
            return pd.read_csv(filepath, index_col=0, header=[0, 1, 2])

        if 'genres' in filename:
            return pd.read_csv(filepath, index_col=0)

        if 'tracks' in filename:
            tracks = pd.read_csv(filepath, index_col=0, header=[0, 1])

            COLUMNS = [('track', 'tags'), ('album', 'tags'), ('artist', 'tags'),
                       ('track', 'genres'), ('track', 'genres_all')]
            for column in COLUMNS:
                tracks[column] = tracks[column].map(ast.literal_eval)

            COLUMNS = [('track', 'date_created'), ('track', 'date_recorded'),
                       ('album', 'date_created'), ('album', 'date_released'),
                       ('artist', 'date_created'), ('artist', 'active_year_begin'),
                       ('artist', 'active_year_end')]
            for column in COLUMNS:
                tracks[column] = pd.to_datetime(tracks[column])

            SUBSETS = ('small', 'medium', 'large')
            tracks['set', 'subset'] = tracks['set', 'subset'].astype(
                pd.api.types.CategoricalDtype(categories=SUBSETS, ordered=True)
            )

            COLUMNS = [('track', 'genre_top'), ('track', 'license'),
                       ('album', 'type'), ('album', 'information'),
                       ('artist', 'bio')]
            for column in COLUMNS:
                tracks[column] = tracks[column].astype('category')

            return tracks

    def get_audio_path(self, track_id):
        tid_str = '{:06d}'.format(track_id)
        return os.path.join(self.DATA_PATH, tid_str[:3], tid_str + '.mp3')

    def get_metadata(self, fma_set):
        tracks = self.load(self.META_TRACKS_PATH)
        tracks = tracks.drop(self.FILES_FAULTY)

        if fma_set == 'full':
            ss = tracks.loc[tracks.set.subset <= 'large']
            partition = {}
            partition['training'] = ss.loc[ss.set.split == 'training'].index.values
            partition['validation'] = ss.loc[ss.set.split == 'validation'].index.values
            partition['test'] = ss.loc[ss.set.split == 'test'].index.values
            return ss, partition
        else:
            ss = tracks.loc[tracks.set.subset <= fma_set]
            partition = {}
            partition['training'] = ss.loc[ss.set.split == 'training'].index.values
            partition['validation'] = ss.loc[ss.set.split == 'validation'].index.values
            partition['test'] = ss.loc[ss.set.split == 'test'].index.values
            return ss, partition

    def get_labels(self, fma_set):
        if fma_set == 'small':
            class_map = {'Electronic':0, 'Experimental':1, 'Folk':2, 'Hip-Hop':3, 'Instrumental':4, 'International':5, 'Pop':6, 'Rock':7}
            labels = {}
            for index, row in self.TRACKS.track.iterrows():
                labels[index] = class_map[row['genre_top']]

            return None, labels, class_map, len(class_map)

        elif fma_set == 'medium':
            labels = {}
            class_map = {}
            cnt = 0
            for cl in self.TRACKS.track.genre_top.cat.categories:
                class_map[cl] = cnt
                cnt += 1

            for index, row in self.TRACKS.track.iterrows():
                labels[index] = class_map[row['genre_top']]

            return None, labels, class_map, len(class_map)

        elif fma_set in ['large', 'full']:
            mlb = MultiLabelBinarizer()
            mlb.fit(self.TRACKS.track.genres_all)
            labels = {}
            class_map = {}
            for index, track in self.TRACKS.track.iterrows():
                labels[index] = mlb.transform([tuple(track.genres_all)])[0]
            
            for index in mlb.classes_:
                class_map[self.GENRES.loc[index].title] = index

            return labels, None, class_map, len(class_map)

        else:
            return None, None, None, None

    def get_filenames(self, filepath):
        names = os.listdir(filepath)
        names.remove('README.txt')
        names.remove('checksums')

        files = []
        for name in names:
            i_names = os.listdir(filepath + f'/{name}/')
            for n in i_names:
                if int(n[:6]) in self.FILES_FAULTY:
                    continue
                files.append(filepath + f'/{name}/{n}')

        return np.asarray(files)